{"version":3,"sources":["components/Cronometer.jsx","components/SelectorTime.jsx","App.jsx","reportWebVitals.js","index.js"],"names":["Cronometer","props","lessThanZero","number","BellowTen","hour","minute","seconds","state","this","cronometerInterval","setInterval","setState","cronometerOnOffSwitch","alert","old","clearInterval","resetStateTimer","className","Component","SelectorTime","handle","name","type","placeholder","onChange","App","target","value","checked","values","Number","showCronometer","bind","prevState","onClick","React","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ecf0d1f2.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nconst TEN = 10;\n\nclass Cronometer extends Component {\n  constructor(props) {\n    super(props);\n\n    const { hour, minute, seconds } = this.props;\n    this.state = {\n      seconds: this.lessThanZero(seconds),\n      minute: this.lessThanZero(minute),\n      hour: this.lessThanZero(hour),\n    };\n  }\n\n  componentDidMount() {\n    const TIMER_SPEED = 1000;\n    this.cronometerInterval = setInterval(() => {\n      this.setState(({ seconds }) => ({ seconds: seconds - 1 }));\n    }, TIMER_SPEED);\n  }\n\n  componentDidUpdate({ cronometerOnOffSwitch }, { seconds, minute, hour }) {\n    const MIN_SECOND = 0;\n    const MIN_MINUTE = 0;\n    const MIN_HOUR = 0;\n    const S9 = 59;\n\n    if (hour === MIN_HOUR && minute === MIN_MINUTE && seconds === MIN_SECOND) {\n      this.setState({ seconds: S9, minute: S9, hour: 1 });\n      cronometerOnOffSwitch();\n      alert('Tempo Esgotado');\n    }\n    if (minute === MIN_MINUTE && seconds === MIN_SECOND) {\n      this.setState((old) => ({ seconds: S9, minute: S9, hour: old.hour - 1 }));\n    }\n    if (seconds === MIN_SECOND) {\n      this.setState((old) => ({ seconds: S9, minute: old.minute - 1 }));\n    }\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.cronometerInterval);\n    const { resetStateTimer } = this.props;\n    resetStateTimer();\n  }\n\n  lessThanZero = (number) => (number < 0 ? 0 : number);\n\n  BellowTen = (number) => (number < TEN ? `0${number}` : number);\n\n  render() {\n    const { seconds, minute, hour } = this.state;\n\n    return (\n      <h2 className=\"timer\">\n        { `${this.BellowTen(hour)}:${this.BellowTen(minute)}:${this.BellowTen(seconds)}`}\n      </h2>\n    );\n  }\n}\n\nCronometer.propTypes = {\n  cronometerOnOffSwitch: PropTypes.func.isRequired,\n  resetStateTimer: PropTypes.func.isRequired,\n  hour: PropTypes.number.isRequired,\n  minute: PropTypes.number.isRequired,\n  seconds: PropTypes.number.isRequired,\n};\n\nexport default Cronometer;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass SelectorTime extends Component {\n  render() {\n    const { handle } = this.props;\n    return (\n      <div className=\"Selector\">\n        <input name=\"hour\" type=\"number\" placeholder=\"hora\" onChange={ handle } />\n        <input name=\"minute\" type=\"number\" placeholder=\"minuto\" onChange={ handle } />\n        <input name=\"seconds\" type=\"number\" placeholder=\"segundo\" onChange={ handle } />\n      </div>\n    );\n  }\n}\n\nSelectorTime.propTypes = {\n  handle: PropTypes.func.isRequired,\n};\n\nexport default SelectorTime;\n","import React from 'react';\nimport './App.css';\nimport Cronometer from './components/Cronometer';\nimport SelectorTime from './components/SelectorTime';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showCronometer: false,\n      seconds: 0,\n      minute: 0,\n      hour: 0,\n    };\n\n    this.cronometerOnOffSwitch = this.cronometerOnOffSwitch.bind(this);\n  }\n\n  handle = ({ target: { name, value, type, checked } }) => {\n    let values = type === 'checkbox' ? checked : value;\n    values = type === 'number' ? Number(value) : values;\n    this.setState({ [name]: values });\n  }\n\n  resetStateTimer = () => {\n    this.setState({ seconds: 0, minute: 0, hour: 0 });\n  }\n\n  cronometerOnOffSwitch() {\n    this.setState((prevState) => ({ showCronometer: !prevState.showCronometer }));\n  }\n\n  render() {\n    const { showCronometer, hour, minute, seconds } = this.state;\n    return (\n      <main className=\"App\">\n        <section className=\"App-header\">\n          { showCronometer\n            && <Cronometer\n              cronometerOnOffSwitch={ this.cronometerOnOffSwitch }\n              resetStateTimer={ this.resetStateTimer }\n              seconds={ seconds }\n              minute={ minute }\n              hour={ hour }\n            />}\n          { !showCronometer && <SelectorTime handle={ this.handle } /> }\n        </section>\n\n        <button\n          type=\"button\"\n          onClick={ this.cronometerOnOffSwitch }\n        >\n          { showCronometer ? 'Desligar Timer' : 'Ligar Timer' }\n        </button>\n      </main>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}